<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This job is responsible for retrieving the ADOP platform management repository and pushing it to the ADOP Bitbucket instance.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_URL</name>
          <description>The URL of the git repo for Platform Management.</description>
          <defaultValue>https://github.com/atsnantes/adop-platform-management.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_BRANCH</name>
          <description>The branch of the git repo for Platform Management.</description>
          <defaultValue>*/feature_bitbucket</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>GENERATE_EXAMPLE_WORKSPACE</name>
          <description>Should an example workspace be generated?</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <de.pellepelster.jenkins.walldisplay.WallDisplayJobProperty plugin="jenkinswalldisplay@0.6.30"/>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>origin</name>
        <url>$GIT_URL</url>
        <credentialsId>adop-jenkins-master</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GIT_BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>gAsuE35s</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -ex

if [ -z $GIT_URL ]; then
	echo &quot;GIT_URL is not set&quot;
    exit 1
fi

# Init globale var
project_key=&quot;platform&quot;
project_name=&quot;platform&quot;
project_desc=&quot;Projets de gestion de la plateforme&quot;
repo_name=&quot;platform-management&quot;

# Init basic auth
bitbucket_token=$(echo -n &quot;$BITBUCKET_ADMIN_USERNAME:$BITBUCKET_ADMIN_PASSWORD&quot; | base64)

# Check if project platform exists
project_exists_return_code=$(curl -s -o /dev/null -w &apos;%{http_code}&apos; -X GET -H &quot;Authorization: Basic $bitbucket_token&quot; -H &quot;Content-Type: application/json&quot; http://bitbucket:7990/bitbucket/rest/api/1.0/projects/platform)

if [ &quot;$project_exists_return_code&quot; -eq &quot;404&quot; ]; then

cat &lt;&lt;EOF &gt; project.json
{
    &quot;key&quot;:&quot;$project_key&quot;,
    &quot;name&quot;:&quot;$project_name&quot;,
    &quot;description&quot;:&quot;$project_desc&quot;
}
EOF

  curl -o /dev/null -X POST -H &quot;Authorization: Basic ${bitbucket_token}&quot; -H &quot;Content-Type: application/json&quot; -d @project.json http://bitbucket:7990/bitbucket/rest/api/1.0/projects
else
  echo &quot;Project already exists, continue ...&quot;
fi

# Check if repo platform exists
repo_exists_return_code=$(curl -s -o /dev/null -w &apos;%{http_code}&apos; -X GET -H &quot;Authorization: Basic $bitbucket_token&quot; -H &quot;Content-Type: application/json&quot; http://bitbucket:7990/bitbucket/rest/api/1.0/projects/$project_key/repos/$repo_name)

if [ &quot;$repo_exists_return_code&quot; -eq &quot;404&quot; ]; then

cat &lt;&lt;EOF &gt; repo.json
{
    &quot;name&quot;:&quot;$repo_name&quot;,
    &quot;scmId&quot;:&quot;git&quot;, 
    &quot;forkable&quot;:true 
}
EOF

  curl -o /dev/null -X POST -H &quot;Authorization: Basic $bitbucket_token&quot; -H &quot;Content-Type: application/json&quot; -d @repo.json http://bitbucket:7990/bitbucket/rest/api/1.0/projects/$project_key/repos
else
  echo &quot;Repo already exists, continue ...&quot;
fi

# Setup remote &amp; populate
git remote add adop ssh://jenkins@bitbucket:7999/$project_key/${repo_name}.git
git fetch adop
git push adop +refs/remotes/origin/*:refs/heads/*</command>
    </hudson.tasks.Shell>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.39">
      <targets>bootstrap/**/*.groovy</targets>
      <usingScriptText>false</usingScriptText>
      <ignoreExisting>false</ignoreExisting>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
      <additionalClasspath></additionalClasspath>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.0">
        <token>${GENERATE_EXAMPLE_WORKSPACE}</token>
      </condition>
      <buildStep class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.30">
        <configs>
          <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs class="empty-list"/>
            <projects>Platform_Management/Load_Cartridge_List</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <block>
              <buildStepFailureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </buildStepFailureThreshold>
              <unstableThreshold>
                <name>UNSTABLE</name>
                <ordinal>1</ordinal>
                <color>YELLOW</color>
                <completeBuild>true</completeBuild>
              </unstableThreshold>
              <failureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </failureThreshold>
            </block>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs class="empty-list"/>
            <projects>Platform_Management/Generate_Example_Workspace</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <block>
              <buildStepFailureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </buildStepFailureThreshold>
              <unstableThreshold>
                <name>UNSTABLE</name>
                <ordinal>1</ordinal>
                <color>YELLOW</color>
                <completeBuild>true</completeBuild>
              </unstableThreshold>
              <failureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </failureThreshold>
            </block>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
           <!-- <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs class="empty-list"/>
            <projects>Platform_Management/Setup_Gerrit</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <block>
              <buildStepFailureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </buildStepFailureThreshold>
              <unstableThreshold>
                <name>UNSTABLE</name>
                <ordinal>1</ordinal>
                <color>YELLOW</color>
                <completeBuild>true</completeBuild>
              </unstableThreshold>
              <failureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </failureThreshold>
            </block>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>-->
        </configs>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.30">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper/>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.6"/>
    <com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper plugin="ssh-agent@1.13">
      <credentialIds>
        <string>adop-jenkins-master</string>
      </credentialIds>
      <ignoreMissing>false</ignoreMissing>
    </com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper>
  </buildWrappers>
</project>